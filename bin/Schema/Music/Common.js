"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MusicalElement {
    constructor(id) {
        this.data = {};
        this.id = id ? id : uniq();
    }
}
exports.MusicalElement = MusicalElement;
class StaffPlace {
    static octave(i) {
        return i * 7 - 1;
    }
    static third() {
        return 3;
    }
}
exports.StaffPlace = StaffPlace;
function maybeThen(value, thenCallback) {
    if (value !== undefined && value !== null) {
        return thenCallback(value);
    }
    else {
        return undefined;
    }
}
exports.maybeThen = maybeThen;
function maybe(value) {
    if (value !== undefined) {
        return value;
    }
    else {
        return undefined;
    }
}
exports.maybe = maybe;
function ensure(value, errorMessage, predicate) {
    if (predicate(value)) {
        return value;
    }
    else {
        throw new Error(errorMessage);
    }
}
exports.ensure = ensure;
function diff(keys, a, b) {
    let isDiff = false;
    let result = {};
    for (let k of keys) {
        if (b[k] !== a[k]) {
            isDiff = true;
            result[k] = b[k];
        }
        else {
            result[k] = a[k]; // still keep original key and value
        }
    }
    return isDiff ? result : undefined;
}
exports.diff = diff;
function ensureNumber(value) {
    let numericValue = Number(value);
    return ensure(numericValue, `value ${value} is not a valid number`, (n) => !Number.isNaN(n));
}
exports.ensureNumber = ensureNumber;
// HELPERS, to be moved later
function toNameCase(s) {
    return s.substr(0, 1).toUpperCase() + s.substr(1).toLowerCase();
}
exports.toNameCase = toNameCase;
function toCamelCase(ss, i) {
    return i === 0 ? ss.toLowerCase() : toNameCase(ss);
}
exports.toCamelCase = toCamelCase;
// PRIVATE
function uniq() {
    let randomNumber = window.performance ? window.performance.now() : Math.random();
    return String(randomNumber).split('.').join('');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL1NjaGVtYS9NdXNpYy9Db21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtJQUlJLFlBQVksRUFBVTtRQUZiLFNBQUksR0FBYyxFQUFFLENBQUM7UUFHMUIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQztDQUNKO0FBUEQsd0NBT0M7QUFFRDtJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBUztRQUNuQixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLO1FBQ1IsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNiLENBQUM7Q0FDSjtBQVJELGdDQVFDO0FBSUQsbUJBQStCLEtBQVEsRUFBRSxZQUF5QjtJQUM5RCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNyQixDQUFDO0FBQ0wsQ0FBQztBQU5ELDhCQU1DO0FBRUQsZUFBeUIsS0FBUTtJQUM3QixFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDckIsQ0FBQztBQUNMLENBQUM7QUFORCxzQkFNQztBQUVELGdCQUE2QixLQUFRLEVBQUUsWUFBb0IsRUFBRSxTQUF1QztJQUNoRyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsQyxDQUFDO0FBQ0wsQ0FBQztBQU5ELHdCQU1DO0FBRUQsY0FBNkQsSUFBUyxFQUFFLENBQUksRUFBRSxDQUFJO0lBQzlFLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztJQUNuQixJQUFJLE1BQU0sR0FBYyxFQUFFLENBQUM7SUFFM0IsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNqQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQixNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ2QsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsb0NBQW9DO1FBQzFELENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDdkMsQ0FBQztBQWRELG9CQWNDO0FBRUQsc0JBQTZCLEtBQVU7SUFDbkMsSUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRWpDLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUNaLFNBQVMsS0FBSyx3QkFBd0IsRUFDdEMsQ0FBQyxDQUFNLEVBQWUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzVELENBQUM7QUFORCxvQ0FNQztBQVFELDZCQUE2QjtBQUU3QixvQkFBMkIsQ0FBUztJQUNoQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNwRSxDQUFDO0FBRkQsZ0NBRUM7QUFFRCxxQkFBNEIsRUFBVSxFQUFFLENBQVM7SUFDN0MsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFGRCxrQ0FFQztBQUVELFVBQVU7QUFFVjtJQUNJLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNqRixNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDcEQsQ0FBQyJ9